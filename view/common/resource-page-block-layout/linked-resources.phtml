<?php
$related_info_terms = $this->themeSetting('related_terms');//they wont create new linked resources
$orderEventsPropTerm = $this->themeSetting('order_events');
$more_info_event_text = $this->themeSetting('more_info_event_text');
$lifecycle_column_text = $this->themeSetting('lifecycle_column_text');
//les classes sont regroupées par catégories puisque omeka-s ne propose pas de gérer l'héritage de classes
//j'ai choisi de réunir par classes plus que par propriété car par exemple la classe "acquisition" pourra être montré sur une fiche E22HMO et une fiche E21Person (donc appelé par des props différentes); 
$events_mapping = $this->themeSetting('events_mapping');
$eventTypes = explode("\n", $events_mapping);
foreach ($eventTypes as $eventType){
    if (empty($eventType)) continue;
    $spltd  = explode(">", $eventType);
    $spltd = array_map('trim', $spltd);
    $eventClassLabel = trim($spltd[0]);
    $eventClasses = preg_split("/[,;]/", $spltd[1]);
    $displayedEventsMapping[$eventClassLabel] = array_map('trim', $eventClasses);
};





// $displayedEventsMapping = array(
//     'Conception' => array('crm:E65_Creation'),
//     'Production' => array('crm:E12_Production',),
//     'Modification' => array('crm:E11_Modification', 'crm:E79_Part_Addition', 'crm:E80_Part_Removal'),
//     'Acquisition' => array('crm:E8_Acquisition', 'crm:E96_Purchase', 'crm:E10_Transfer_of_Custody'),
//     'Destruction' => array('crm:E6_Destruction', 'crm:E64_End_of_Existence', 'crm:E81_Transformation'),
// );
//mapping of class id with categories
$eventClassId2categ = array();
foreach($displayedEventsMapping as $eventCategory=>$eventClassTermArray){
    foreach($eventClassTermArray as $eventClassTerm){
        $eventClassId = $this->api()->searchOne('resource_classes', ['term'=>$eventClassTerm])->getContent()->id();
        $eventClassId2categ[$eventClassId] = $eventCategory;
    }
};

//because they are allready show in the box 'associated elemtns' they won't appear in the linked resources
$skippedPropsList = preg_split("/[;,]/", $related_info_terms);
$skippedPropsList = array_map('trim', $skippedPropsList);
$skippedPropsIdList = array();
foreach($skippedPropsList as $skipedPropTerm){
    $skippedPropId = $this->api()->searchOne('properties', ['term'=>$skipedPropTerm])->getContent()->id();
    $skippedPropsIdList[] = $skippedPropId;
};

$foundEvents = array();
$otherLinkedItems = array();


//this should be split into 2: find events and categorize events
//this finds the linked resources and order them by date (time_span)
$i=0;
$j=0;
$maxTerm = 20;
$max_itemPerTerm = 8;
foreach ($resource->subjectValues() as $index => $subjectValues) {
    if(++$i > $maxTerm) break;//max terms analyzed
    $propID = explode('-',$index)[0];
    if (!in_array($propID, $skippedPropsIdList)){//the prop is not among the forbidden ones
        foreach ($subjectValues as $subjectValue) {
            if(++$j > $max_itemPerTerm) break;//max item analyzed per term
            $subjectResource = $subjectValue['val']->resource();
            // echo json_encode($subjectValue);
            if ($subjectResource->getControllerName($subjectResource) === 'item' && $subjectValue['val']->isPublic()){//if the linked item is not a media (through RightsHolder property) and the lin property is public
                $subjectResourceClassId = $subjectResource->resourceClass()->id();
                $datelit = $subjectResource->value($orderEventsPropTerm, ['literal']);
                preg_match('/\d\d\d\d?/', $datelit, $date);
                $dateindex = empty($date) ? 0 : 100*$date[0] ;// ex: 194400 for 1944
                if (in_array($subjectResourceClassId, array_keys($eventClassId2categ))){
                    //manage case with no date. Objective: basic order by order of the displayedEventsMapping : conception then production then modification, then etc.
                    $propTerm = $this->api()->searchOne('properties', ['id'=>$propID])->getContent()->term();
                    while (key_exists($dateindex, $foundEvents)) {++$dateindex; };//if key allready in use (same date); then go to next index (194401 for example)
                    $foundEvents[$propTerm] = $subjectResource;
                    $orderedEvents[$dateindex] = $subjectResource;
                } else  {
                    while (key_exists($dateindex, $otherLinkedItems)) {++$dateindex; };
                    $otherLinkedItems[$dateindex] = $subjectResource;
                };
            }
            
        };
    }  
};
if (isset($orderedEvents)) {
    ksort($orderedEvents);
};
if (isset($otherLinkedItems)) {
    ksort($otherLinkedItems);
};




function writeEvent($event, $more_info_event_text, $eventClassId2categ=null, $viewFile=null) {
//    echo json_encode($eventClassId2categ);
    $eventClass = $event->resourceClass();
    if (!isset($eventClass)){
        //$logger->info("no class found for this item (event): {$event->id()}");//TODO fix "Error: Using $this when not in object context"
        //TODO ecrire quelque chose dans la vue pour qu'on s'enn rende compte
        return;
    }
    $eventClassId = $eventClass->id();
    $eventURL = $event->url();
    $displayString = (isset($eventClassId2categ) && key_exists($eventClassId, $eventClassId2categ)) ? $eventClassId2categ[$eventClassId] : $event->resourceClass()->label();
    ?>
    <dl id = <?php echo ("linkedResource-" . $event->id())?> class="bloco linkedBloco">
        <h3><?php echo $displayString?></h3>
        <?php
        echo $viewFile ? $event->displayValues(array('viewName' => $viewFile,)) : $event->displayValues();
        ?>
        <div class="more-info">
            <a href=<?php echo $eventURL?>> 
            + <span id="hide"> &nbsp;<?php echo $more_info_event_text ?> </span>
            </a>
        </div>
    </dl>
    <?php
};
?>


<div class="columnTitle">
    <?php echo $lifecycle_column_text ?>
</div>

<!-- subject values printing -->
<?php if (!$foundEvents): ?>
    <dl id = "noEventWarning" class="bloco linkedBloco" >
        <div class="center">Aucun évenement trouvé</div>
    </dl>
<?php else: 
    foreach ($foundEvents as $propTerm=>$event) {
        //this remove the property that does the link between the item and the event (ex: has produced). 
        //because this link is obvious, there is no need to write it in the event in item page.
        $event->unsetTerm($propTerm);
        writeEvent($event, $more_info_event_text, $eventClassId2categ, 'common/resource-values_event-in-item');
    };        
endif; ?>


<?php if ($otherLinkedItems): ?>
    <div class="columnTitle">
    ↓ Autres éléments associés trouvés ↓
    </div>
    <?php 
    foreach ($otherLinkedItems as $item) {
        writeEvent($item, $more_info_event_text, null, 'common/resource-values_other-in-item');
    };
    ?>
<?php endif; ?>
